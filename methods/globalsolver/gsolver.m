function [bestx, bestf, bestc, archive, external_return] = gsolver(funh_obj, num_xvar, lb, ub, initmatrix, funh_con, param, varargin)
% This function is a wrapper on methods in global optimization/minimization 
% Child population is generated by a DE operator
% Feasibility first sorting
% Don't use on equality constraints
% input:
%       funh_obj : function handle to objective function
%       num_xvar : number design variables
%       lb: upper bound of design varibles
%                1d row array
%       up: lower bound of design variables
%       initmatrix:  partial population to be embeded in
%                           initial population
%       funh_con : function handle to constraint functions
%       param : structure specifying ea parameters(param. popsize; param.gen)
%       varargin : additional variables for dealing with bilevel problems
% output:
%       bestx : global search results of design variables   (best value or nd front)
%       bestf : global search results of objective values   (best value or nd front)
%       bestc : global search results of constraints
%             tr          for constraint problems, if no feasible is found, return least infeasible one
% 
%--------------------------------------------------------------------------
% create argument parser
p = inputParser;
addRequired(p, 'funh_obj');
addRequired(p, 'num_xvar');
addRequired(p, 'lb');
addRequired(p, 'ub');
addRequired(p, 'initmatrix');
addRequired(p, 'funh_con');
addRequired(p, 'param');
addParameter(p, 'externalfunction', []);
addParameter(p, 'visualize', false);
addParameter(p, 'pf', []);
addParameter(p, 'termination_criterion', true);
parse(p, funh_obj, num_xvar, lb, ub, initmatrix, funh_con, param, varargin{:});
%------- interpret argument ---------------
funh_obj= p.Results.funh_obj;
num_xvar = p.Results.num_xvar;
lb = p.Results.lb;
ub = p.Results.ub;
initmatrix= p.Results.initmatrix;
funh_con = p.Results.funh_con;
param = p.Results.param;
external_funh= p.Results.externalfunction;
visualize = p.Results.visualize;
pf = p.Results.pf;
termination_criterion = p.Results.termination_criterion;
%-----------

%---- for accomodate external function to deal with each generation--
external_return = [];

% if mod(param.popsize, 2) > 0
%     error('population size should be even number');
% end

record = false;
if visualize && record
    f1 = figure(2);
    obj = VideoWriter('moving.avi');
    obj.Quality= 100;
    obj.FrameRate = 25;
    open(obj);
end
if visualize 
    f1 = figure(1);
end

gen_ndarchive = [];

% Initialization
% make sure initmatrix is unique
initmatrix = unique(initmatrix,'rows', 'stable');
[pop,archive] = initialize_pop(funh_obj, funh_con, num_xvar, lb, ub, initmatrix, param);
num_obj = size(pop.F, 2);
num_con = size(pop.C, 2);

% keep ND archive
if termination_criterion == 1
    termination_length = 5;
else
    termination_length = 10;
end


termination_vector = ones(3, termination_length) .* Inf; % IGD use 3 rows, HV use 1 row
single_pop = solutions;
single_pop.add(pop.X, [], pop.F, [],  pop.C, []);  % xu, XL, FU, FL, FC, FLC
single_pop.nd_sort;
gen_ndarchive = [gen_ndarchive, single_pop];
clear single_pop

if visualize
    F = gen_ndarchive(1).FUs;
    plotMO(f1, F, pf, 0);
%     X_pop =  unifrnd(repmat(lb,param.popsize,1),repmat(ub,param.popsize,1));
%     xlabel('f1','FontSize', 22);
%     ylabel('f2', 'FontSize', 22);
%     hYLabel = get(gca,'YLabel');
%     set(hYLabel,'rotation',0,'VerticalAlignment','middle');
%     % title('LL initialization with PS generator','FontSize', 22);
%     legend( 'LL PF', 'LL initialization', 'Location', 'northeast');
%     lgd = legend;
%     lgd.FontSize = 22;
%     lgd.Location = 'northeast';
%     
%     f2 = figure(3);
%     output  = funh_obj(X_pop);
%     scatter(pf(:, 1), pf(:,2), 50, 'k', 'filled'); hold on;
%     scatter(output(:, 1), output(:, 2),  30, 'b', 'filled');
%     xlabel('f1','FontSize', 22);
%     ylabel('f2', 'FontSize', 22);
%     hYLabel = get(gca,'YLabel');
%     set(hYLabel,'rotation',0,'VerticalAlignment','middle');
%     % title('LL initialization  with random initialization','FontSize', 20);
%     legend('LL PF', 'LL solutions');
%     lgd = legend;
%     lgd.FontSize = 22;
%     lgd.Location = 'SouthEast';
%     box on;
%     grid on;  
%     fprintf('this plot should be only for run mfile, Batch2_vx_investigate');
%     return;
%     
    
end

% Each generation active population
gen_archive = [repmat([1], size(pop.X, 1), 1), pop.X, pop.F, pop.C];
if ~isempty(external_funh)
    external_funh(pop);
end



gen = 1;
parentX = pop.X;
while gen <= param.gen - 1
    % Recombination
    child_X = generate_child_DE(lb, ub, parentX, param);
    % child_X = generate_child_GA(lb, ub, parentX, param);
    
    % Check and remove repeated children 
    existingX = archive.sols(:, 2: num_xvar + 1);
    child_X = remove_repeated_solution(existingX, child_X);
    child_X = unique(child_X, 'rows', 'stable');  % this to eliminate solutions in child that are identical but different from archive
    
    % Evaluate and Order
    [pop, archive, front_idx] = evaluate_order(pop, archive, funh_obj, funh_con, child_X, gen, param);

    % save nd front of each generation
    single_pop = solutions();
    single_pop.add(child_X, [], funh_obj(child_X), [],  funh_con(child_X), []); % xu, XL, FU, FL, FC, FLC
    single_pop.merge(gen_ndarchive(end))
    single_pop.nd_sort;
    gen_ndarchive = [gen_ndarchive, single_pop];
    clear single_pop


    % Reduce 2N to N
    [pop] = reduce_pop(pop, param.popsize, front_idx, lb, ub);
    gen_archive = extend_pop_archive(pop, gen_archive, gen+1);
   
    % Termination condition for MO
    if size(pop.F, 2) > 1 && termination_criterion
        % sliding window = num_xvar
         if visualize
             verbose = true;
         else
             verbose = false;
             
         end
        

         if termination_criterion == 1       % IGD termination
             % archive, sliding_window, threshold, gen, termination_vector, verbose
             [termination_flag, termination_vector] = Termination_criterion_IGD(gen_ndarchive, termination_length, 0.01, gen+1, termination_vector, verbose);
         end

         if termination_criterion == 2       % HV termination
             % archive, sliding_window, threshold, gen, termination_vector, verbose
             [termination_flag, termination_vector] = Termination_criterion_HV(gen_ndarchive, 10, 0.001, gen+1, termination_vector, verbose);
         end

         if termination_flag
             % fprintf('[INFO] fire termination condition [type %d] at generation %d \n',termination_criterion, gen+1);
             % fprintf('[INFO] Termination vector: \n')
             % disp(termination_vector);
             if visualize
                 plotMO(f1, pop.F,pf, gen);
             end
             break; % terminate generation
         end
    end
    
    % ----for accomodatint external function
    if ~isempty(external_funh)
        external_funh(pop);
    end
    
    %-----------visualization patch adding function freely-------------
    if visualize
        F = gen_ndarchive(end).FUs;
        plotMO(f1, F,pf, gen);
    end
    
    if visualize && record
        frame = getframe(gcf);
        for i = 1: 20
            writeVideo(obj, frame);
        end
    end
    %----------------------------------------------------------
    gen = gen+1;
    % parentX = tournament_parent(pop.X);
    parentX = pop.X;
end

if visualize
    close(f1); 
    if record
        obj.close();
    end
end

% use archive to save last pop_x
archive.pop_last = pop;
[pop, front_idx] = pop_sort(pop);

select_binary = front_idx == 1;
bestx = pop.X(select_binary, :);
bestf = pop.F(select_binary, :);

if ~isempty(pop.C)
    bestc = pop.C(select_binary, :);
else
    bestc = [];
end

end

function parent_XU = tournament_parent(sorted_XU)
% make sure XU are sorted 
order1 = randperm(size(sorted_XU,1));
order2 = randperm(size(sorted_XU,1));
order3 = min([order1', order2'], [], 2);
parent_XU = sorted_XU(order3, :);
end

function gen_archive = extend_pop_archive(pop, gen_archive, gen)
gen_archive = [gen_archive;[repmat(gen,size(pop.X, 1),1), pop.X, pop.F, pop.C]];
end

function plotMO(fighn, pop, pf, gen)
clf(fighn);
plot(pf(:, 1), pf(:, 2), 'k.'); hold on;
scatter(pop(:, 1), pop(:, 2),  30, 'r', 'filled');
title(num2str(gen));
grid on;
pause(0.1);
end
